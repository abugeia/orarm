
# Oauth client configuration specifics
config:
  # Add config annotations
  annotations: {}

  existingSecret: oauth2-proxy-secret

  # The name of the cookie that oauth2-proxy will create
  # If left empty, it will default to the release name
  cookieName: ""
  google: {}
    # adminEmail: xxxx
    # useApplicationDefaultCredentials: true
    # targetPrincipal: xxxx
    # serviceAccountJson: xxxx
    # Alternatively, use an existing secret (see google-secret.yaml for required fields)
    # Example:
    # existingSecret: google-secret
    # groups: []
    # Example:
    #  - group1@example.com
    #  - group2@example.com
  # Default configuration, to be overridden
  configFile: |-
    reverse_proxy = true
    email_domains = [ "*" ]
    upstreams = "static://200"
    provider = "github"
    scope = "user:email read:org"
    github_users = "antoinebugeia,abugeia"
    cookie_domains = ".orarm.cagou.ovh"
    redirect_url = "https://auth.orarm.cagou.ovh/oauth2/callback"
    whitelist_domains = "*.orarm.cagou.ovh"
  # Custom configuration file: oauth2_proxy.cfg
  # configFile: |-
  #   pass_basic_auth = false
  #   pass_access_token = true
  # Use an existing config map (see configmap.yaml for required fields)
  # Example:
  # existingConfig: config


extraArgs: 
  real-client-ip-header: X-Forwarded-For
  skip-provider-button: true
  http-address: 0.0.0.0:4180
  skip-auth-strip-headers: true
  pass-authorization-header: true
  pass-host-header: true
  
extraEnv: []

envFrom: []
# Load environment variables from a ConfigMap(s) and/or Secret(s)
# that already exists (created and managed by you).
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
#
# PS: Changes in these ConfigMaps or Secrets will not be automatically
#     detected and you must manually restart the relevant Pods after changes.
#
#  - configMapRef:
#      name: special-config
#  - secretRef:
#      name: special-config-secret

# -- Custom labels to add into metadata
customLabels: {}

# To authorize individual email addresses
# That is part of extraArgs but since this needs special treatment we need to do a separate section
authenticatedEmailsFile:
  enabled: false
  # Defines how the email addresses file will be projected, via a configmap or secret
  persistence: configmap
  # template is the name of the configmap what contains the email user list but has been configured without this chart.
  # It's a simpler way to maintain only one configmap (user list) instead changing it for each oauth2-proxy service.
  # Be aware the value name in the extern config map in data needs to be named to "restricted_user_access" or to the
  # provided value in restrictedUserAccessKey field.
  template: ""
  # The configmap/secret key under which the list of email access is stored
  # Defaults to "restricted_user_access" if not filled-in, but can be overridden to allow flexibility
  restrictedUserAccessKey: ""
  # One email per line
  # example:
  # restricted_access: |-
  #   name1@domain
  #   name2@domain
  # If you override the config with restricted_access it will configure a user list within this chart what takes care of the
  # config map resource.
  restricted_access: ""
  annotations: {}
  # helm.sh/resource-policy: keep


ingress:
  enabled: true
  className: traefik
  path: /oauth2
  # Only used if API capabilities (networking.k8s.io/v1) allow it
  pathType: Prefix
  # Used to create an Ingress record.
  hosts:
    - auth.orarm.cagou.ovh

  labels: {}
  annotations:
    kubernetes.io/ingress.class: traefik
    # traefik.ingress.kubernetes.io/router.middlewares: security-oauth2-proxy@kubernetescrd
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: "letsencrypt"  
  tls:
    # Secrets must be manually created in the namespace.
    - secretName: oauth2-proxy-tls
      hosts:
        - auth.orarm.cagou.ovh