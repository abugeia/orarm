ipFamily:
  ipv6:
    enabled: false

updateStrategy:
  # test to avoid too much ram usage
  type: Recreate

expose:
  tls:
    # Enable TLS or not.
    # Delete the "ssl-redirect" annotations in "expose.ingress.annotations" when TLS is disabled and "expose.type" is "ingress"
    # Note: if the "expose.type" is "ingress" and TLS is disabled,
    # the port must be included in the command when pulling/pushing images.
    # Refer to https://github.com/goharbor/harbor/issues/5291 for details.
    enabled: true
    # The source of the tls certificate. Set as "auto", "secret"
    # or "none" and fill the information in the corresponding section
    # 1) auto: generate the tls certificate automatically
    # 2) secret: read the tls certificate from the specified secret.
    # The tls certificate can be generated manually or by cert manager
    # 3) none: configure no tls certificate for the ingress. If the default
    # tls certificate is configured in the ingress controller, choose this option
    certSource: secret
    auto:
      # The common name used to generate the certificate, it's necessary
      # when the type isn't "ingress"
      commonName: ""
    secret:
      # The name of secret which contains keys named:
      # "tls.crt" - the certificate
      # "tls.key" - the private key
      secretName: harbor-tls
  ingress:
    hosts:
      core: harbor.cagou.ovh
    # set to the type of ingress controller if it has specific requirements.
    # leave as `default` for most ingress controllers.
    # set to `gce` if using the GCE ingress controller
    # set to `ncp` if using the NCP (NSX-T Container Plugin) ingress controller
    # set to `alb` if using the ALB ingress controller
    # set to `f5-bigip` if using the F5 BIG-IP ingress controller
    controller: default
    ## Allow .Capabilities.KubeVersion.Version to be overridden while creating ingress
    kubeVersionOverride: ""
    className: "traefik"
    annotations:
      # note different ingress controllers may require a different ssl-redirect annotation
      # for Envoy, use ingress.kubernetes.io/force-ssl-redirect: "true" and remove the nginx lines below
      # ingress.kubernetes.io/ssl-redirect: "true"
      # ingress.kubernetes.io/proxy-body-size: "0"
      # nginx.ingress.kubernetes.io/ssl-redirect: "true"
      # nginx.ingress.kubernetes.io/proxy-body-size: "0"
      # traefik.ingress.kubernetes.io/router.middlewares: "security-oauth2-proxy@kubernetescrd"
      cert-manager.io/cluster-issuer: "letsencrypt"
      kubernetes.io/tls-acme: "true"
    # ingress-specific labels

 
# The external URL for Harbor core service. It is used to
# 1) populate the docker/helm commands showed on portal
# 2) populate the token service URL returned to docker client
#
# Format: protocol://domain[:port]. Usually:
# 1) if "expose.type" is "ingress", the "domain" should be
# the value of "expose.ingress.hosts.core"
# 2) if "expose.type" is "clusterIP", the "domain" should be
# the value of "expose.clusterIP.name"
# 3) if "expose.type" is "nodePort", the "domain" should be
# the IP address of k8s node
#
# If Harbor is deployed behind the proxy, set it as the URL of proxy
externalURL: https://harbor.cagou.ovh


existingSecretAdminPasswordKey: HARBOR_ADMIN_PASSWORD
harborAdminPassword: Harbor12345


portal:
  resources:
    limits:
      memory: 50Mi
  nodeSelector:
    kubernetes.io/arch: amd64

core:
  startupProbe:
    initialDelaySeconds: 15
  resources:
    limits:
        memory: 200Mi
  nodeSelector:
    kubernetes.io/arch: amd64

jobservice:
  resources:
    limits:
        memory: 80Mi
  nodeSelector:
    kubernetes.io/arch: amd64


registry:
  registry:
    resources:
      limits:
        memory: 150Mi
  controller:
    resources:
      limits:
        memory: 150Mi
  nodeSelector:
    kubernetes.io/arch: amd64


trivy:
  enabled: false
  # resources:
  #   requests:
  #     memory: 128Mi
  #   limits:
  #     cpu: 1
  #     memory: 250Mi
  # nodeSelector:
  #   kubernetes.io/arch: amd64

database:
  type: external
  external:
    host: pg-harbor-postgresql.storage.svc.cluster.local
    port: 5432
    existingSecret: harbor-pg-secret
    # existingSecretKey: pg-user-password
    # existingSecretAdminPasswordKey: pg-admin-password
    coreDatabase: harbor_db
    username: harbor_user
  # internal:
  #   resources:
  #     limits:
  #       memory: 300Mi
  #   nodeSelector:
  #     kubernetes.io/arch: amd64
  #   initContainer:
  #     resources:
  #       limits:
  #         memory: 128Mi

redis:
  internal:
    resources:
      limits:
        memory: 80Mi
    nodeSelector: 
      kubernetes.io/arch: amd64

exporter:
  resources:
    limits:
        memory: 128Mi
  nodeSelector: {}

