
alertmanager:
  ingress:
    enabled: true

    # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
    # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
    ingressClassName: traefik

    annotations:
      traefik.ingress.kubernetes.io/router.middlewares: "security-oauth2-proxy@kubernetescrd"
      cert-manager.io/cluster-issuer: "letsencrypt"
      kubernetes.io/tls-acme: "true"

    ## Hosts must be provided if Ingress is enabled.
    ##
    hosts: 
      - alertmanager.cagou.ovh

    ## Paths to use for ingress rules - one path should match the alertmanagerSpec.routePrefix
    ##
    paths: 
    - /

    ## For Kubernetes >= 1.18 you should specify the pathType (determines how Ingress paths should be matched)
    ## See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#better-path-matching-with-path-types
    # pathType: ImplementationSpecific

    ## TLS configuration for Alertmanager Ingress
    ## Secret must be manually created in the namespace
    ##
    tls:
    - secretName: alertmanager-tls
      hosts:
      - alertmanager.cagou.ovh


   
grafana:

  ingress:
    ## If true, Grafana Ingress will be created
    ##
    enabled: true

    ## IngressClassName for Grafana Ingress.
    ## Should be provided if Ingress is enable.
    ##
    ingressClassName: traefik

    ## Annotations for Grafana Ingress
    ##
    annotations: 
      traefik.ingress.kubernetes.io/router.middlewares: "security-oauth2-proxy@kubernetescrd"
      cert-manager.io/cluster-issuer: "letsencrypt"
      kubernetes.io/tls-acme: "true"
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"

    ## Labels to be added to the Ingress
    ##
    labels: {}

    ## Hostnames.
    ## Must be provided if Ingress is enable.
    ##
    hosts:
      - grafana.cagou.ovh


    ## Path for grafana ingress
    path: /

    ## TLS configuration for grafana Ingress
    ## Secret must be manually created in the namespace
    ##
    tls: 
    - secretName: grafana-tls
      hosts:
      - grafana.cagou.ovh

## Component scraping etcd
##
kubeEtcd:
  enabled: false


## Deploy a Prometheus instance
##
prometheus:

  ingress:
    enabled: true

    # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
    # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
    # ingressClassName: nginx

    annotations:
      traefik.ingress.kubernetes.io/router.middlewares: "security-oauth2-proxy@kubernetescrd"
      cert-manager.io/cluster-issuer: "letsencrypt"
      kubernetes.io/tls-acme: "true"
    labels: {}

    ## Redirect ingress to an additional defined port on the service
    # servicePort: 8081

    ## Hostnames.
    ## Must be provided if Ingress is enabled.
    ##
    hosts:
      - prometheus.cagou.ovh


    ## Paths to use for ingress rules - one path should match the prometheusSpec.routePrefix
    ##
    paths:
    - /

    ## For Kubernetes >= 1.18 you should specify the pathType (determines how Ingress paths should be matched)
    ## See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#better-path-matching-with-path-types
    # pathType: ImplementationSpecific

    ## TLS configuration for Prometheus Ingress
    ## Secret must be manually created in the namespace
    ##
    tls:
      - secretName: prometheus-tls
        hosts:
          - prometheus.cagou.ovh
